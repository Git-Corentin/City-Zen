{% extends 'base.html.twig' %}

{% block title %}{{ name }}{% endblock %}

{% block body %}
    <h1>Bienvenue à {{ name }}</h1>
    <h3>Informations sur le pays : {{ country }} ({{ continent }})</h3>
    <img src="{{ flag }}" alt="Drapeau de {{ name }}" height="100px">
    Monnaie : {{ currency }}
    <br>
    Capitale : {{ capital }}
    <br>
    Type de gouvernement : {{ government }}
    <br>
    Population : {{ population }}
    <br>
    Densité : {{ density }}
    <br>
    Langues : {{ languages }}
    <br>
    Espérance de vie : {{ life_expectancy }}
    <br>
    Plat national : {{ national_dish }}
    <br>
    Religion : {{ religion }}
    <br>
    Surface : {{ surface }}
    <br>
    Température annuelle moyenne : {{ annual_temperature }}
    <br>
    Indicatif téléphonique : {{ phone_code }}



    <div class="container">
        <div id="weather">Chargement de la météo...</div>
        <div id="map"></div>
    </div>

    <style>
        /* Conteneur Flexbox pour aligner la météo et la carte */
        .container {
            display: flex;
            gap: 20px;
            margin: 20px;
        }

        /* Conteneur Flexbox pour aligner le bouton et la carte */
        .container_bis {
            display: block;
        }

        /* Réduire la largeur de la section météo */
        #weather {
            flex: 0 0 30%; /* Prend 30% de la largeur */
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .weather-summary, .weather-details {
            text-align: center;
            color: #333;
        }

        .weather-summary p, .weather-details p {
            margin: 8px 0;
            font-size: 1em;
        }

        #showMoreBtn {
            background-color: black;
            color: white;
            padding: 8px 16px;
            font-size: 0.9em;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 15px;
        }

        .hidden {
            display: none;
        }

        /* Style pour la carte */
        #map {
            flex: 1; /* Prend le reste de l'espace */
            height: 400px;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        /* Family Pack button */
        .family-pack {
            text-align: center;
        }

        .family-pack button {
            background-color: #d4af37;
            border: none;
            padding: 15px 400px;
            color: white;
            font-size: 18px;
            font-weight: bold;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .family-pack button:hover {
            background-color: #c5a023;
        }

        .price {
            margin-top: 10px;
            font-size: 20px;
            color: #333;
            font-weight: bold;
        }
    </style>

    <!-- Leaflet pour la carte -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />



{% endblock %}

{% block javascripts %}
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
        const cityName = "{{ name|e('js') }}";
        const latitude = {{ latitude }};
        const longitude = {{ longitude }};

        const apiKey = "779875b69f9002abced6c51cc13f5502";

        async function fetchWeather() {
        const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric&lang=fr`;

        try {
        const response = await fetch(url);
        const weatherData = await response.json();
        console.log("Données météo :", weatherData);

        const weatherContainer = document.getElementById("weather");
        weatherContainer.innerHTML = `
        <div class="weather-summary">
            <h2>Météo actuelle</h2>
            <img src="https://openweathermap.org/img/wn/${weatherData.weather[0].icon}.png" alt="Icone Météo">
            <p><strong>Température :</strong> ${weatherData.main.temp} °C</p>
            <p><strong>Description :</strong> ${weatherData.weather[0].description}</p>
            <p><strong>Vent :</strong> ${weatherData.wind.speed} m/s</p>
            <p><strong>Humidité :</strong> ${weatherData.main.humidity}%</p>
            <button id="showMoreBtn" onclick="toggleDetails()">Afficher plus</button>
        </div>

        <div class="weather-details hidden">
            <h3>Détails</h3>
            <p><strong>Température ressentie :</strong> ${weatherData.main.feels_like} °C</p>
            <p><strong>Température min :</strong> ${weatherData.main.temp_min} °C</p>
            <p><strong>Température max :</strong> ${weatherData.main.temp_max} °C</p>
            <p><strong>Pression :</strong> ${weatherData.main.pressure} hPa</p>
            <p><strong>Visibilité :</strong> ${weatherData.visibility} m</p>
            <p><strong>Pluie :</strong> ${weatherData.rain ? `${weatherData.rain["1h"]} mm/h` : 'Aucune précipitation'}</p>
            <p><strong>Couverture nuageuse :</strong> ${weatherData.clouds.all}%</p>
            <p><strong>Lever du soleil :</strong> ${new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString()}</p>
            <p><strong>Coucher du soleil :</strong> ${new Date(weatherData.sys.sunset * 1000).toLocaleTimeString()}</p>
        </div>
        `;
        } catch (error) {
        console.error("Erreur lors de la récupération des données météo :", error);
        document.getElementById("weather").textContent = "Erreur lors de la récupération des données météo.";
        }
        }

        function toggleDetails() {
        const details = document.querySelector('.weather-details');
        const showMoreBtn = document.getElementById("showMoreBtn");
        details.classList.toggle('hidden');
        showMoreBtn.textContent = details.classList.contains('hidden') ? "Afficher plus" : "Afficher moins";
        }

        document.addEventListener("DOMContentLoaded", fetchWeather);

        function initMap() {
        const map = L.map('map').setView([latitude, longitude], 13);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        L.marker([latitude, longitude]).addTo(map)
        .bindPopup(`<b>${cityName}</b><br>Latitude: ${latitude}, Longitude: ${longitude}`)
        .openPopup();
        }

        document.addEventListener("DOMContentLoaded", initMap);
    </script>

{% endblock %}

